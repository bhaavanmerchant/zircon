#ru Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

declare_args() {
  # Allow driver tracing to be completely disabled (as if it didn't exist).
  enable_driver_tracing = false
}

config_group("enable_driver_tracing") {
  if (enable_driver_tracing) {
    defines = [ "ENABLE_DRIVER_TRACING" ]
  }
}

executable("devmgr") {
  sources = [
    "bootfs.cpp",
    "devhost-shared.cpp",
    "devmgr-binding.cpp",
    "devmgr-coordinator.cpp",
    "devmgr-devfs.cpp",
    "devmgr-drivers.cpp",
    "devmgr-fdio.cpp",
    "devmgr.cpp",
  ]

  deps += [
    # We can avoid the fuchsia.crash dependency if crashsvc connects directly
    # to the analyzer.
    "$zx/system/fidl/fuchsia-crash:c",
    "$zx/system/fidl/fuchsia-io:c",
    "$zx/system/fidl/fuchsia-mem:c",
    "$zx/system/ulib/async",
    "$zx/system/ulib/async:async-default",
    "$zx/system/ulib/async-loop",
    "$zx/system/ulib/bootdata",
    "$zx/system/ulib/ddk",
    "$zx/system/ulib/driver-info",
    "$zx/system/ulib/fbl",
    "$zx/system/ulib/fdio",
    "$zx/system/ulib/fidl",
    "$zx/system/ulib/fs",
    "$zx/system/ulib/launchpad",
    "$zx/system/ulib/loader-service",
    "$zx/system/ulib/memfs",
    "$zx/system/ulib/port",
    "$zx/system/ulib/sync",
    "$zx/system/ulib/zircon",
    "$zx/system/ulib/zircon-internal",
    "$zx/system/ulib/zx",
    "$zx/system/ulib/zxcpp",
    "$zx/third_party/ulib/lz4",
  ]

  # Bring the auxiliaries into the build and the image.  devhost isn't
  # listed here because it's implicitly in data_deps of every driver().
  data_deps = [
    ":dmctl",
    ":fshost",
    "$zx/system/core/crashsvc",
    "$zx/system/core/netsvc",
    "$zx/system/core/svchost",
    "$zx/system/core/virtcon:virtual-console",
    "$zx/system/core/pwrbtn-monitor",

    #TODO: only needed for the dismal kludges
    ":devhost",
  ]
}

executable("fshost") {
  sources = [
    "block-watcher.cpp",
    "bootfs.cpp",
    "devmgr-fdio.cpp",
    "fshost.cpp",
    "vfs-rpc.cpp",
  ]
  deps += [
    "$zx/system/fidl/fuchsia-io:c",
    "$zx/system/ulib/async",
    "$zx/system/ulib/async:async-cpp",
    "$zx/system/ulib/async:async-default",
    "$zx/system/ulib/async-loop",
    "$zx/system/ulib/async-loop:async-loop-cpp",
    "$zx/system/ulib/bootdata",
    "$zx/system/ulib/fbl",
    "$zx/system/ulib/fdio",
    "$zx/system/ulib/fs",
    "$zx/system/ulib/fs-management",
    "$zx/system/ulib/gpt",
    "$zx/system/ulib/launchpad",
    "$zx/system/ulib/loader-service",
    "$zx/system/ulib/memfs",
    "$zx/system/ulib/memfs:memfs-cpp",
    "$zx/system/ulib/sync",
    "$zx/system/ulib/trace",
    "$zx/system/ulib/trace-engine",
    "$zx/system/ulib/zircon",
    "$zx/system/ulib/zx",
    "$zx/system/ulib/zxcpp",
    "$zx/third_party/ulib/cksum",
    "$zx/third_party/ulib/lz4",
  ]
}

executable("devhost") {
  #TODO: asan variant installs as devhost.asan

  sources = [
    "devhost-main.cpp",
  ]
  deps += [ ":driver" ]
}

# "$zx/system/ulib/driver" is an alias for this.
library("driver") {
  shared = true
  static = false
  sources = [
    "devhost-api.cpp",
    "devhost-core.cpp",
    "devhost-rpc-server.cpp",
    "devhost-shared.cpp",
    "devhost.cpp",
  ]
  deps += [
    ":enable_driver_tracing",
    "$zx/public/gn/config:visibility_hidden",
    "$zx/system/fidl/fuchsia-io:c",
    "$zx/system/ulib/ddk",
    "$zx/system/ulib/fbl",
    "$zx/system/ulib/fdio",
    "$zx/system/ulib/fidl",
    "$zx/system/ulib/port",
    "$zx/system/ulib/sync",
    "$zx/system/ulib/zircon",
    "$zx/system/ulib/zx",
    "$zx/system/ulib/zxcpp",
  ]

  if (enable_driver_tracing) {
    sources += [ "devhost-tracing.cpp" ]
    deps += [
      "$zx/system/ulib/async:async-cpp.static",
      "$zx/system/ulib/async:async-default.static",
      "$zx/system/ulib/async:static",
      "$zx/system/ulib/async-loop:static",
      "$zx/system/ulib/trace:static",
      "$zx/system/ulib/trace-engine:static",
      "$zx/system/ulib/trace-provider:static",
    ]

    # Since the tracing support is brought in via an archive, we need explicit
    # references to ensure everything is present.
    libs = [ "$zx/system/ulib/trace-engine/ddk-exports.ld" ]
  } else {
    # Some symbols still need to be present even if tracing is disabled.
    # See the linker script for details.
    libs = [ "$zx/system/ulib/trace-engine/ddk-disabled-exports.ld" ]
  }

  # This library is on the whitelist for driver() shared library deps.
  # It doesn't trigger the assert_no_metadata() check, and it prunes the
  # metadata walk here so our own deps are not subject to the check.
  if (false) {  #TODO
    metadata = {
      driver_blacklist = []
      driver_blacklist_barrier = []
    }
  }
}

driver("dmctl") {
  sources = [
    "devhost-shared.cpp",
    "dmctl.cpp",
  ]
  deps += [
    "$zx/system/ulib/ddk",
    "$zx/system/ulib/ddktl",
    "$zx/system/ulib/fbl",
    "$zx/system/ulib/port",
    "$zx/system/ulib/zircon",
    "$zx/system/ulib/zx",
    "$zx/system/ulib/zxcpp",
  ]
}
