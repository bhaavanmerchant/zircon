# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("$zx/public/gn/host_tool_action.gni")

template("banjo_library") {
  assert(defined(invoker.sources),
         "banjo_library(\"$target_name\") must set `sources`")

  if (defined(invoker.deps)) {
    not_needed(invoker, [ "deps" ])  #TODO
  }

  banjo_target = target_name

  # The generated headers are the same in every toolchain, so generate only
  # once, in $default_toolchain.
  _banjo_gen_dir = get_label_info(":$banjo_target($default_toolchain)",
                                  "target_gen_dir") + "/$banjo_target"

  gen_target = "${banjo_target}._generate"

  config(banjo_target) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])
    if (defined(invoker.deps)) {
      # The generated headers of a dependent banjo_library() will #include
      # the generated headers for its dependencies.
      public_deps = invoker.deps
    }
    deps = [
      ":$gen_target($default_toolchain)",
    ]
    metadata = {
      banjo_inputs = invoker.sources
      banjo_input_args =
          [ "--files" ] + rebase_path(invoker.sources, root_build_dir)
      banjo_include_dirs = [ "$_banjo_gen_dir/include" ]
    }
    if (false) {  #TODO
      # The generated headers of a dependent banjo_library() will #include the
      # generated headers for its dependencies' bindings libraries.
      include_dirs =
          [ get_metadata([ ":$banjo_target" ], [ "banjo_include_dirs" ]) ]
    } else if (current_toolchain != default_toolchain) {
      not_needed(invoker, [ "sources" ])
      include_dirs = [ "$_banjo_gen_dir/include" ]
    }
  }

  if (current_toolchain == default_toolchain) {
    # TODO(mcgrathr): temporary until everything is renamed with . names
    banjo_library_name = string_replace(banjo_target, "-", ".")

    banjo_path = string_replace(banjo_library_name, ".", "/")
    banjo_name = string_replace(banjo_path, "ddk/protocol/", "")

    gen_files = [
      {
        switch = "--ddk-header"
        file = "$_banjo_gen_dir/include/ddk/protocol/${banjo_name}.h"
      },
      {
        switch = "--ddktl-header"
        file = "$_banjo_gen_dir/include/ddktl/protocol/${banjo_name}.h"
      },
      {
        file = "$_banjo_gen_dir/include/ddktl/protocol/${banjo_name}-internal.h"
      },
    ]

    gen_args = [
      "--name",
      banjo_library_name,
    ]
    gen_outputs = []
    foreach(gen, gen_files) {
      gen_outputs += [ gen.file ]
      if (defined(gen.switch)) {
        gen_args += [
          gen.switch,
          rebase_path(gen.file, root_build_dir),
        ]
      }
    }

    host_tool_action(gen_target) {
      forward_variables_from(invoker,
                             [
                               "deps",
                               "testonly",
                             ])
      visibility = [ ":*" ]

      tool = "$zx/system/host/banjo:banjoc"

      outputs = gen_outputs

      if (false) {  #TODO
        sources = [
          get_metadata([ ":$banjo_target" ], [ "banjo_inputs" ]),
        ]
        args = gen_args +
               [ get_metadata([ ":$banjo_target" ], [ "banjo_input_args" ]) ]
      } else {
        # TODO: horrible hack, uses action below
        sources = [
          "$_banjo_gen_dir/${gen_target}.rsp",
        ]
        if (!defined(deps)) {
          deps = []
        }
        deps += [ ":${gen_target}.rsp" ]
        args = [ "@" + rebase_path(sources[0], root_build_dir) ]
      }
    }

    # TODO: horrible hack, used above
    _banjo_rsp = []
    if (defined(invoker.deps)) {
      foreach(dep, invoker.deps) {
        dep_name = get_label_info(dep, "name")
        dep_gen_dir = get_label_info(dep, "target_gen_dir") + "/$dep_name"
        _banjo_rsp += [ "@" + rebase_path("${dep_gen_dir}/${dep_name}.rsp",
                                          root_build_dir) ]
      }
    }
    _banjo_rsp += [ "--files" ] + rebase_path(invoker.sources, root_build_dir)
    write_file("$_banjo_gen_dir/${banjo_target}.rsp", _banjo_rsp)
    action("${gen_target}.rsp") {
      visibility = [ ":$gen_target" ]
      sources = [
        "$_banjo_gen_dir/${banjo_target}.rsp",
      ]
      outputs = [
        "$_banjo_gen_dir/${gen_target}.rsp",
      ]
      depfile = "${outputs[0]}.d"
      script = "$zx/public/gn/fidl-expand-rsp.sh"
      args = rebase_path(outputs + [ depfile ], root_build_dir) + gen_args +
             [ "@" + rebase_path(sources[0], root_build_dir) ]
    }
  }
}
