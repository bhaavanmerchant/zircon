# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("ccache.gni")
import("clang.gni")
import("gcc.gni")
import("goma.gni")
import("toolchain.gni")

template("define_c_toolchain") {
  # Translate GN cpu/os to GNU config tuple.
  if (invoker.cpu == "arm64") {
    tc_target = "aarch64"
  } else if (invoker.cpu == "x64") {
    tc_target = "x86_64"
  } else {
    tc_target = invoker.cpu
  }
  if (invoker.os == "mac") {
    tc_target += "-darwin"
  } else if (invoker.os == "win") {
    tc_target += "-windows-msvc"
  } else {
    tc_target += "-${invoker.os}"
  }

  # Cached and distributed wrappers just go on the front of compiler commands.
  compiler_prefix = ""
  if (defined(invoker.use_goma)) {
    use_goma = invoker.use_goma
  }
  if (use_goma) {
    compiler_prefix = "$goma_dir/gomacc "
  } else {
    if (defined(invoker.use_ccache)) {
      use_ccache = invoker.use_ccache
    }
    if (use_ccache) {
      compiler_prefix = "ccache "
    }
  }

  use_gcc = defined(invoker.gcc) && invoker.gcc

  # If either is supplied both must be supplied.
  if (defined(invoker.tool_dir) || defined(invoker.tool_prefix)) {
    tc = {
      tool_dir = invoker.tool_dir
      tool_prefix = invoker.tool_prefix
    }
  } else if (use_gcc) {
    if (defined(invoker.host) && invoker.host) {
      # Using host vanilla GCC, so this can't be cross-compiling.
      assert(invoker.cpu == host_cpu)
      assert(invoker.os == host_os)
      tc = {
        tool_dir = ""
        tool_prefix = ""
      }
    } else {
      tc = {
        tool_dir = gcc_tool_dir
        tool_prefix = "${invoker.cpu}-elf-"
      }
    }
  } else {
    tc = {
      tool_dir = clang_tool_dir
      tool_prefix = "llvm-"
    }
  }

  if (use_gcc) {
    tc.cc = "${tc.tool_prefix}gcc"
    tc.cxx = "${tc.tool_prefix}g++"
  } else {
    tc.cc = "clang"
    tc.cxx = "clang++"
  }

  if (tc.tool_dir == "") {
    dir_prefix = ""
  } else {
    dir_prefix = rebase_path(tc.tool_dir, root_build_dir) + "/"
  }

  cc = "$compiler_prefix$dir_prefix${tc.cc}"
  cxx = "$compiler_prefix$dir_prefix${tc.cxx}"
  ld = cxx
  ar = "$dir_prefix${tc.tool_prefix}ar"

  _compile_common = {
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_file_part}}.o",
    ]
    depfile = "{{output}}.d"
    depsformat = "gcc"
    switches = "-MD -MF $depfile -o {{output}} {{defines}} {{include_dirs}}"
  }

  _link_common = {
    default_output_dir = "{{target_out_dir}}"
    outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    outputs = [
      outfile,
    ]
    rspfile = "${outfile}.rsp"
    switches = "-o $outfile {{ldflags}}"
    if (invoker.os == "mac") {
      rspfile_content = "{{inputs_newline}}"
      link_inputs = "-Wl,-filelist,'$rspfile'"
      link_libs = "{{libs}} {{solibs}}"
    } else {
      rspfile_content = "{{inputs}}"
      link_inputs = "@'$rspfile'"
      if (invoker.os == "win") {
        link_libs = "{{libs}} {{solibs}}"
      } else {
        link_libs = "-Wl,--start-group {{libs}} -Wl,--end-group {{solibs}}"
        mapfile = "${outfile}.map"
        outputs += [ mapfile ]
        switches += " -Wl,-Map,$mapfile"
      }
    }

    # TODO: strip
  }

  define_toolchain(target_name) {
    tools = [
      {
        name = "asm"
        description = "ASM {{output}}"
        forward_variables_from(_compile_common, "*")
        command = "$cc $switches {{asmflags}} -c {{source}}"
      },

      {
        name = "cc"
        description = "CC {{output}}"
        forward_variables_from(_compile_common, "*")
        command = "$cc $switches {{cflags}} {{cflags_c}} -c {{source}}"
      },

      {
        name = "cxx"
        description = "CXX {{output}}"
        forward_variables_from(_compile_common, "*")
        command = "$cxx $switches {{cflags}} {{cflags_cc}} -c {{source}}"
      },

      {
        name = "objc"
        description = "OBJC {{output}}"
        forward_variables_from(_compile_common, "*")
        command = "$cc $switches {{cflags}} {{cflags_c}} {{cflags_objc}} -c {{source}}"
      },

      {
        name = "objcxx"
        description = "OBJCXX {{output}}"
        forward_variables_from(_compile_common, "*")
        command = "$cxx $switches {{cflags}} {{cflags_cc}} {{cflags_objcc}} -c {{source}}"
      },

      {
        name = "alink"
        description = "AR {{output}}"
        rspfile = "{{output}}.rsp"
        command =
            "rm -f {{output}} && $ar {{arflags}} cqsD {{output}} '@$rspfile'"
        rspfile_content = "{{inputs}}"
        default_output_dir = "{{target_out_dir}}"
        default_output_extension = ".a"
        output_prefix = "lib"
        outputs = [
          "{{output_dir}}/{{target_output_name}}{{output_extension}}",
        ]
      },

      {
        forward_variables_from(_link_common, "*")
        name = "link"
        description = "LINK $outfile"

        command = "$ld $switches $link_inputs $link_libs"
      },
    ]

    if (defined(invoker.shlib) && invoker.shlib) {
      # We don't support building shared libraries for host tools.
      assert(invoker.os == "fuchsia",
             "shared library creation not supported for ${invoker.os}")

      # TODO: strip

      tools += [
        {
          forward_variables_from(_link_common, "*")

          name = "solink"
          description = "LINK_SHLIB $outfile"

          output_prefix = "lib"
          soname = "${output_prefix}{{target_output_name}}{{output_extension}}"

          # Put the automatic -soname first so that ldflags can override it.
          switches = "-shared -Wl,-soname,$soname $switches"

          command = "$ld $switches $link_inputs $link_libs"

          # TODO: abi stubs
        },

        {
          forward_variables_from(_link_common, "*")

          name = "solink_module"
          description = "LINK_MODULE $outfile"

          switches = "-shared $switches"
          command = "$ld $switches $link_inputs $link_libs"
        },
      ]
    }

    forward_variables_from(invoker, [ "deps" ])

    toolchain_args = {
      current_cpu = invoker.cpu
      current_os = invoker.os

      if (defined(invoker.toolchain_args)) {
        forward_variables_from(invoker.toolchain_args,
                               "*",
                               [
                                 "current_cpu",
                                 "current_os",
                                 "toolchain",
                               ])
      }

      # This shadows the global and so has to be cleared first.
      toolchain = {
      }
      toolchain = {
        name = target_name
        label = get_label_info(":$target_name", "label_no_toolchain")

        # These are provided by BUILDCONFIG.gn so they are expected in
        # every toolchain.
        globals = {
        }
        public_deps = []

        # This gets `tool_dir` et al as expected by c_utils.gni (set above).
        forward_variables_from(tc, "*")
        target_tuple = tc_target

        if (defined(invoker.toolchain_vars)) {
          forward_variables_from(invoker.toolchain_vars, "*")
        }
      }
    }
  }
}
