# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

assert(!defined(current_toolchain), "only for buildconfig context")

zx = "/"

set_default_toolchain("$zx/public/gn/toolchain:stub")

import("$zx/public/gn/buildconfig/toolchain.gni")

foreach(file, toolchain.imports) {
  import(file)
}

host_platform = "${host_os}-${host_cpu}"

host_toolchain = "$zx/public/gn/toolchain:host-${host_platform}-clang"

current_cpu = "arm64"

if (current_cpu == "x64") {
  zircon_cpu = "x86"
} else if (current_cpu != "") {
  zircon_cpu = current_cpu
}

is_kernel = true
is_host = false

if (!defined(is_gcc)) {
  is_gcc = false
}

set_defaults("source_set") {
  configs = []
}
set_defaults("executable") {
  configs = []
}

template("library") {
  host = defined(invoker.host) && invoker.host
  kernel = defined(invoker.kernel) && invoker.kernel
  shared = defined(invoker.shared) && invoker.shared
  if (defined(invoker.static)) {
    static = invoker.static
  } else {
    static = !kernel
  }
  _library_params = [
    "kernel",
    "host",
    "shared",
    "static",
  ]
  # Not all of these will be referenced in all toolchains.
  not_needed(_library_params)

  _library_name = target_name

  config("${_library_name}.config") {
    visibility = [ ":${_library_name}.headers" ]
    include_dirs = [ "include" ]
  }
  source_set("${_library_name}.headers") {
    public_configs = [ ":${_library_name}.config" ]
  }

  if (is_kernel) {
    if (kernel) {
      source_set(_library_name) {
        forward_variables_from(invoker, "*", _library_params)
      }
    }
  } else if (is_host) {
    if (host) {
      static_library(_library_name) {
        forward_variables_from(invoker, "*", _library_params)
      }
    }
  } else if (static || shared) {
    source_set("${_library_name}._sources") {
      visibility = [
        "${_library_name}.static",
        "${_library_name}.shared",
      ]
      forward_variables_from(invoker, "*", _library_params)
    }
    if (static) {
      static_library("${_library_name}.static") {
        forward_variables_from(invoker,
                               [
                                 "public_configs",
                                 "public_deps",
                                 "testonly",
                                 "visibility",
                               ])
        deps = [
          ":${_library_name}._sources",
        ]
      }
    }
    if (shared) {
      shared_library("${_library_name}.shared") {
        forward_variables_from(invoker,
                               [
                                 "public_configs",
                                 "public_deps",
                                 "testonly",
                                 "visibility",
                               ])
        deps = [
          ":${_library_name}._sources",
        ]
      }
    }
    group(_library_name) {
      forward_variables_from(invoker,
                             [
                               "testonly",
                               "visibility",
                             ])
      if (shared) {
        public_deps = [
          ":${_library_name}.shared",
        ]
      } else {
        public_deps = [
          ":${_library_name}.static",
        ]
      }
    }
  }

  # If this library is the main target for the directory, then give its
  # auxiliary targets aliases.
  if (get_label_info(":$_library_name", "name") ==
      get_path_info(get_label_info(":$_library_name", "dir"), "file")) {
    group("headers") {
      forward_variables_from(invoker,
                             [
                               "testonly",
                               "visibility",
                             ])
      public_deps = [
        ":${_library_name}.headers",
      ]
    }
    if (!is_kernel) {
      if (static) {
        group("static") {
          forward_variables_from(invoker,
                                 [
                                   "testonly",
                                   "visibility",
                                 ])
          public_deps = [
            ":${_library_name}.static",
          ]
        }
      }
      if (shared) {
        group("shared") {
          forward_variables_from(invoker,
                                 [
                                   "testonly",
                                   "visibility",
                                 ])
          public_deps = [
            ":${_library_name}.shared",
          ]
        }
      }
    }
  }
}
